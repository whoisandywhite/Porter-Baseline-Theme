@use "sass:map";
@use "sass:meta";
@use "sass:string";
@use "../variables";

@use "sass:math";
@use "sass:color";

/**
 * Clamps, aka truncates, multi-line text. Note that non-webkit browsers will
 * not see the ellipsis ¯\_(ツ)_/¯
 * @param {Value}          $font-size     - Font size of the text
 * @param {Unitless Value} $line-height   - Line height of the text;
 * @param {Number}         $lines-to-show - Number of lines to show
 * @example scss
 * p {
 *    @include line-clamp($font-size: 16px, $line-height: 1.5, $lines-to-show: 3);
 * }
 */
@mixin line-clamp($font-size, $line-height, $lines-to-show) {
  @if math.is-unitless($line-height) ==false {
    $line-height: create-unitless-line-height($font-size, $line-height);
  }

  // Fallback for non-webkit browsers
  display: block;

  display: -webkit-box;
  font-size: $font-size;

  // Fallback for non-webkit browsers
  height: ($font-size * $line-height * $lines-to-show);
  line-height: $line-height;
  overflow: hidden;
  text-overflow: ellipsis;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: $lines-to-show;
}

@function encodecolor($string) {
  @if meta.type-of($string) == "color" and string.index(#{$string}, "#") ==1 {
    $hex: string.slice(color.ie-hex-str($string), 4);
    $string: string.unquote("#{$hex}");

    @return "%23" + $string;
  }

  @return $string;
}

// Replace `$search` with `$replace` in `$string`
// Used on our SVG icon backgrounds for custom forms.
//
// @author Kitty Giraudel
// @param {String} $string - Initial string
// @param {String} $search - Substring to replace
// @param {String} $replace ('') - New value
// @return {String} - Updated string
@function str-replace($string, $search, $replace: "") {
  $index: string.index($string, $search);

  @if $index {
    @return string.slice($string, 1, $index - 1) + $replace +
      str-replace(string.slice($string, $index + string.length($search)), $search, $replace);
  }

  @return $string;
}

// See https://codepen.io/kevinweber/pen/dXWoRw
//
// Requires the use of quotes around data URIs.

@function escape-svg($string) {
  @if string.index($string, "data:image/svg+xml") {
    @each $char, $encoded in variables.$escaped-characters {
      // Do not escape the url brackets
      @if string.index($string, "url(") ==1 {
        $string: url("#{str-replace(string.slice($string, 6, -3), $char, $encoded)}");
      } @else {
        $string: str-replace($string, $char, $encoded);
      }
    }
  }

  @return $string;
}

@function get-contrast-color($color) {
  // Calculate luminance of the input color
  $color-luminance: luminance($color);

  // Define contrast colors
  $dark-color: #10202F;
  $light-color: #ffffff;

  // Calculate luminance of contrast colors
  $dark-luminance: luminance($dark-color);
  $light-luminance: luminance($light-color);

  // Calculate contrast ratios
  $contrast-dark: if(
    $color-luminance > $dark-luminance,
    math.div($color-luminance + 0.05, $dark-luminance + 0.05),
    math.div($dark-luminance + 0.05, $color-luminance + 0.05)
  );
  $contrast-light: if(
    $color-luminance > $light-luminance,
    math.div($color-luminance + 0.05, $light-luminance + 0.05),
    math.div($light-luminance + 0.05, $color-luminance + 0.05)
  );

  // Return the color with the highest contrast ratio
  @return if($contrast-dark > $contrast-light, $dark-color, $light-color);
}

// Function to calculate relative luminance
@function luminance($color) {

  // FUTURE PROOF for when Dart Sass supports color.channel()
  $rgb: (
    "r": calc(color.channel($color, "red", $space: rgb) / 255),
    "g": calc(color.channel($color, "green", $space: rgb) / 255),
    "b": calc(color.channel($color, "blue", $space: rgb) / 255)
  );

  @each $key, $value in $rgb {
    $value: if($value < 0.04045, calc($value / 12.92), math.pow(math.div($value + 0.055, 1.055), 2.4));
    $rgb: map.merge(
      $rgb,
      (
        $key: $value
      )
    );
  }

  @return (map.get($rgb, "r") * 0.2126)+ (map.get($rgb, "g") * 0.7152)+ (map.get($rgb, "b") * 0.0722);
}
